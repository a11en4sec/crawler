// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	math "math"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:   "User.UserLogin",
			Path:   []string{"/userCenter/login"},
			Method: []string{"POST"},
			//Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for User service

type UserService interface {
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...client.CallOption) (*UserLoginResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) UserLogin(ctx context.Context, in *UserLoginReq, opts ...client.CallOption) (*UserLoginResp, error) {
	req := c.c.NewRequest(c.name, "User.UserLogin", in)
	out := new(UserLoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	UserLogin(context.Context, *UserLoginReq, *UserLoginResp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		UserLogin(ctx context.Context, in *UserLoginReq, out *UserLoginResp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:   "User.UserLogin",
		Path:   []string{"/userCenter/login"},
		Method: []string{"POST"},
		//Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) UserLogin(ctx context.Context, in *UserLoginReq, out *UserLoginResp) error {
	return h.UserHandler.UserLogin(ctx, in, out)
}
